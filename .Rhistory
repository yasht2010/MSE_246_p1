symbols <- c('^XCI', '^XOI', '^XBD', '^BTK', '^XAU', '^XAL', '^XTC', '^XNG', 'FSRFX', 'XLU')
ret_data <- c(rep(1,10))
for (i in 1:10) {
curr_data <- as.data.frame(getSymbols(Symbols=symbols[i],auto.assign=FALSE,from='2016-07-27'))
ret_val <- (curr_data[nrow(curr_data),4] - curr_data[1,1]) / curr_data[1,1]
ret_val <- ret_val - 1
ret_data[i] <- ret_val
}
ret_data
symbols <- c('FCX', 'ABX', 'HL', 'AUY', 'KGC', 'MS', 'SCHW', 'AMTD', 'GS', 'ETFC')
ret_data <- c(rep(1,10))
for (i in 1:10) {
curr_data <- as.data.frame(getSymbols(Symbols=symbols[i],auto.assign=FALSE,from='2016-07-27'))
ret_val <- (curr_data[nrow(curr_data),4] - curr_data[1,1]) / curr_data[1,1]
ret_val <- ret_val - 1
ret_data[i] <- ret_val
}
remove(view_t)
remove(test)
symbols <- c('FCX', 'ABX', 'HL', 'AUY', 'KGC', 'MS', 'SCHW', 'AMTD', 'GS', 'ETFC')
ret_data <- c(rep(1,10))
for (i in 1:10) {
curr_data <- as.data.frame(getSymbols(Symbols=symbols[i],auto.assign=FALSE,from='2016-07-27'))
ret_val <- (curr_data[nrow(curr_data),4] - curr_data[1,1]) / curr_data[1,1]
ret_val <- ret_val - 1
ret_data[i] <- ret_val
}
ret_data
min(ret_data)
max(ret_data
)
max(ret_data)
min(ret_data)
ret_data
symbols <- c('GOLD', 'RGLD', 'AEM', 'NEM', 'SLW', 'GS', 'MKTX', 'AMP', 'PJC', 'SF')
ret_data <- c(rep(1,10))
for (i in 1:10) {
curr_data <- as.data.frame(getSymbols(Symbols=symbols[i],auto.assign=FALSE,from='2016-07-27'))
ret_val <- (curr_data[nrow(curr_data),4] - curr_data[1,1]) / curr_data[1,1]
ret_val <- ret_val - 1
ret_data[i] <- ret_val
}
ret_data
max(ret_data)
min(ret_data)
install.packages('kernlab')
library('kernlab')
install.packages('~/Downloads/stringkernels_0.8.9.tar.gz', repos=NULL,type='source')
remove.packages('~/Downloads/stringkernels_0.8.9.tar.gz', repos=NULL,type='source')
remove.packages('~/Downloads/stringkernels_0.8.9.tar.gz')
remove.packages('stringkernels')
install.packages('stringkernels')
library('stringkernels')
?ksvm
?sk
?stringdot
?gapweightkernel
?stringdot
?data
data('reuters')
x<-reuters
View(x)
?kvsm
library('kernlab')
?kvsm
?ksvm
?cross
?`cross,ksvm-method`
View(y)
data('reuters')
y<-rlabels
View(y)
?plot
library('randomForest')
library('ISLR')
ncols(Carseats)
ncol(Carseats)
library('png')
install.packages('png')
library('png')
?readPNG
?rnorm
?pnorm
?hist
?rnorm
pnorm(0.95,0,1)
qnorm(0.95,0,1)
qnorm(0.975,0,1)
?xlim
?hist
?sample
?quantile
?set.seed
?.Random.seed
?which
as.POSIXct()
?as.POSIXct()
setwd('~/Desktop/Stanford Undergrad/MS&E 246/Project/Github Code/MSE_246_p1')
knitr::opts_chunk$set(echo = TRUE)
# Starting the libraries
library(dplyr)
library(ROCR)
library(data.table)
set.seed(1)
df <- read.csv("SBA_loan_data_new.csv")
# Macroeconomic data sets
unemployment_data <- read.csv("emp-unemployment.csv")
interest_rates_data <- read.csv("FED_IR.csv")
Tornado_damage_economic <- read.csv("Tornado FL.csv")
Small_business_lending_data <- read.csv("Small_Business_lending_stats.csv")
GDPSectorData <- read.csv("GDP_Industry.csv")
TED <- read.csv("TEDRATE.csv")
SNP500 <- read.csv("SNP500.csv")
set.seed(1)
SBLR <- c(rep(0,length(df$BorrState)))
for (i in 1:length(df$BorrState)) {
SBLR[i]=Small_business_lending_data[match(df$BorrState[i],Small_business_lending_data$State),5]
}
GDP <- c(rep(0,length(df$ApprovalFiscalYear)))
set.seed(1)
#Add small business loan ratio (total small business loans issued/total small businesses per state)
df=cbind(df,SBLR)
# Average HPI Index by State for 1990-2016
hpi_state <- read.csv("hpi_state.csv", header=TRUE, stringsAsFactors=F)
hpi_state$ProjectState = as.factor(hpi_state$ProjectState)
df <- left_join(df, hpi_state, by=c("ProjectState", "ApprovalFiscalYear"))
df$mn_hpi = as.numeric(df$mn_hpi)
# Filtering out Loans which are canceled or exempt
df <- filter(df, LoanStatus != "CANCLD")
df <- filter(df, LoanStatus != "EXEMPT")
df <- filter(df, DeliveryMethod != "504REFI")
set.seed(1)
df <- subset(df,select = -c(Program,BorrName,BorrStreet,
BorrZip,CDC_Street,CDC_City,CDC_Zip))
# adding isDefault
df$isDefault <- ifelse(df$LoanStatus=="CHGOFF",1,0)
for (i in 1:nrow(df)) {
if(df$LoanStatus[i]=="PIF"){df$isDefault[i]= 2}}
df$isDefault <- factor(df$isDefault)
df$isDefault <- as.numeric(df$isDefault)
# factor conversion
df$NotSameState <- factor(df$NotSameState)
df$ThirdPartyApproved <- factor(df$ThirdPartyApproved)
# adding dayselaped
df <- mutate(df,dayselapsed = as.numeric(difftime(strptime(ChargeOffDate, format = "%m/%d/%Y"),
strptime(ApprovalDate, format = "%m/%d/%Y"))))
df$dayselapsed[is.na(df$dayselapsed)]=round(df$TermInMonths*30.4)
df$dayselapsed[is.na(df$dayselapsed)] <- 7300
# adding FinalYear
df$FinalYear=df$ApprovalFiscalYear+round((df$dayselapsed)/365)
# Removing extra columns
df <- subset(df,select = -c(ThirdPartyLender_Name,ThirdPartyLender_City,ThirdPartyLender_State,
subpgmdesc,NaicsDescription,ProjectCounty,ProjectState))
# adding Naics2digits
df <- mutate(df,Naics2digits = substr(NaicsCode,1,2))
# Getting Interest Rates
set.seed(1)
interest_rates=matrix(0,nrow=length(df$ApprovalFiscalYear),ncol=length(1990:2014))
for (i in 1:length(1990:2014)) {
interest_rates[,i]=interest_rates_data[match(1989+i,interest_rates_data$Year),2]
}
interest_rates = interest_rates[1,]
# Initializing Matrix for Adding columns
set.seed(1)
matrix_test=matrix(0,nrow=0,ncol=23)
finalMatrix=matrix(0,nrow=0,ncol=23)
tempRow = matrix(0,nrow=1,ncol=23)
end_index=0
x=c("loanNum","start","stop","interestRate","gdpIndustry","unemploymentRate","hpiState","tedSpread","sandp500",
"BorrState","CDC_State","ThirdPartyDollars","GrossApproval","ApprovalDate","ApprovalFiscalYear","DeliveryMethod",
"TermInMonths","BusinessType","NotSameState","SBLR","Naics2digits","isDefault","endIndicator")
colnames(matrix_test)=x
df_const <- as.matrix(subset(df,select = c(BorrState,CDC_State,ThirdPartyDollars,GrossApproval,
ApprovalDate,ApprovalFiscalYear,DeliveryMethod,
TermInMonths,BusinessType,NotSameState,SBLR,Naics2digits)))
for (i in 1:nrow(df)) {
start=df$ApprovalFiscalYear[i]
stop=df$ApprovalFiscalYear[i]+round(df$dayselapsed[i]/365)
periods=length(start:stop)
n=0
unemployment_start_index=match(start,unemployment_data[1,])
unemployment_state_index=match(df$BorrState[i],unemployment_data[,3])
GDP_NAICS_index=match(df$Naics2digits[i],GDPSectorData[,2])
GDP_start_index=match(start,GDPSectorData[1,])
HPI_start_index=match(interaction(df$BorrState[i],start),
interaction(hpi_state$ProjectState, hpi_state$ApprovalFiscalYear))
if(stop<=2014){
for (j in 1:periods) {
tempRow = matrix(0,nrow=1,ncol=23)
tempRow[1,1]=i
tempRow[1,2]=start+n
tempRow[1,3]=start+n+1
tempRow[1,4] = interest_rates[start-1990+j]
tempRow[1,5]=GDPSectorData[GDP_NAICS_index,GDP_start_index+n]
tempRow[1,6]=unemployment_data[unemployment_state_index,unemployment_start_index+n]
tempRow[1,7]=hpi_state[HPI_start_index+n,3]
tempRow[1,8]=TED[start-1990+j,2]
tempRow[1,9]=SNP500[start-1990+j,1]
tempRow[1,as.numeric(10:21)] = df_const[i,]
if(df$isDefault[i]==2){
if((start+n)==stop){tempRow[1,22]=1
tempRow[1,23]=1}
}
if(start+n==stop) {tempRow[1,23]=1}
n=n+1
matrix_test <- rbind(matrix_test,tempRow)
}
}
else{
for (j in 1:(2014-start)) {
tempRow = matrix(0,nrow=1,ncol=23)
tempRow[1,1]=i
tempRow[1,2]=start+n
tempRow[1,3]=start+n+1
tempRow[1,4]=interest_rates[start-1990+j]
tempRow[1,5]=GDPSectorData[GDP_NAICS_index,GDP_start_index+n]
tempRow[1,6]=unemployment_data[unemployment_state_index,unemployment_start_index+n]
tempRow[1,7]=hpi_state[HPI_start_index+n,3]
tempRow[1,8]=TED[start-1990+j,2]
tempRow[1,9]=SNP500[start-1990+j,1]
tempRow[1,10:21] = df_const[i,]
if(df$isDefault[i]==2){
if((start+n)==stop){tempRow[1,22]=1
tempRow[1,23]=1}
}
if(unemployment_start_index+n==stop) {tempRow[1,23]=1}
if(j==2014-start){tempRow[1,23]=1}
n=n+1
matrix_test <- rbind(matrix_test,tempRow)
}
}
if(nrow(matrix_test)>=1000){
finalMatrix <- rbind(finalMatrix,matrix_test)
matrix_test=matrix(0,nrow=0,ncol=23)
}
}
finalMatrix <- rbind(finalMatrix,matrix_test)
finalMatrix=as.data.frame(finalMatrix)
# Convert ApprovalDate
finalMatrix <- mutate(finalMatrix, ApprovalDate = as.numeric(difftime(strptime(ApprovalDate, format ="%m/%d/%Y"),strptime("1/1/1990", format = "%m/%d/%Y"))))
finalMatrix$start <- as.numeric(as.character(finalMatrix$start))
finalMatrix$stop <- as.numeric(as.character(finalMatrix$stop))
finalMatrix$isDefault <- as.numeric(as.character(finalMatrix$isDefault))
finalMatrix$GrossApproval <- as.numeric(as.character(finalMatrix$GrossApproval))
finalMatrix$unemploymentRate <- as.numeric(as.character(finalMatrix$unemploymentRate))
finalMatrix$interestRate <- as.numeric(as.character(finalMatrix$interestRate))
finalMatrix$hpiState <- as.numeric(as.character(finalMatrix$hpiState))
finalMatrix$TermInMonths <- as.numeric(as.character(finalMatrix$TermInMonths))
finalMatrix$SBLR <- as.numeric(as.character(finalMatrix$SBLR))
finalMatrix$tedSpread <-as.numeric(as.character(finalMatrix$tedSpread))
finalMatrix$sandp500 <- as.numeric(as.character(finalMatrix$sandp500))
finalMatrix$loanNum <- as.numeric(as.character(finalMatrix$loanNum))
# Export file
#write.csv(finalMatrix, file="big_data_Matrix.csv", col.names=FALSE)
set.seed(1)
training_set=finalMatrix[1:520847,]
test_set=finalMatrix[520848+1:nrow(finalMatrix),]
filtered_set=filter(test_set,ApprovalFiscalYear==2008,TermInMonths>=60)
filtered_set=filter(filtered_set,start==2008)
loans_sampled_test=sample(filtered_set$loanNum[1]:filtered_set$loanNum[nrow(filtered_set)],500,replace=FALSE)
loans_sampled_test=as.numeric(loans_sampled_test)
validation_set <- test_set[!(test_set$loanNum %in% loans_sampled_test),]
test500_set <- test_set[(test_set$loanNum %in% loans_sampled_test),]
loss_train <- filter(training_set, isDefault == 1)
chg_vals <- select(df, GrossChargeOffAmount)
chg_vals$loanNum <- c(1:nrow(df))
loss_train <- left_join(loss_train, chg_vals, by="loanNum") # adding charge off values
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+sandp500+BusinessType, data=loss_train)
summary(loss.mod)
?predict.lm
View(training_set)
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+sandp500+BusinessType+GrossApproval+TermInMonths, data=loss_train)
summary(loss.mod)
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+GrossApproval+TermInMonths, data=loss_train)
summary(loss.mod)
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+GrossApproval+TermInMonths+NotSameState, data=loss_train)
summary(loss.mod)
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+GrossApproval+TermInMonths+SBLR, data=loss_train)
summary(loss.mod)
# Set up loss training set
loss_train <- filter(training_set, isDefault == 1)
chg_vals <- select(df, GrossChargeOffAmount)
chg_vals$loanNum <- c(1:nrow(df))
loss_train <- left_join(loss_train, chg_vals, by="loanNum") # adding charge off values
# Set up loss validation set
loss_valid <- filter(test_set, isDefault == 1)
loss_valid <- left_join(loss_valid, chg_vals, by="loanNum") # adding charge off values
# Training loss model
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+GrossApproval+TermInMonths+SBLR, data=loss_train)
summary(loss.mod)
# Testing loss model, computing MSE
loss.pred <- predict(loss.mod, newdata=loss_valid)
loss.mse <- mean((loss_valid$GrossChargeOffAmount-loss.pred)^2)
loss.mse
View(loss_valid)
sum(is.na(loss_valid$GrossChargeOffAmount))
sum(is.na(loss.pred))
loss.pred <- loss.pred[!is.na(loss.pred),]
loss.pred <- loss.pred[!is.na(loss.pred)]
View(loss.pred)
# Set up loss training set
loss_train <- filter(training_set, isDefault == 1)
chg_vals <- select(df, GrossChargeOffAmount)
chg_vals$loanNum <- c(1:nrow(df))
loss_train <- left_join(loss_train, chg_vals, by="loanNum") # adding charge off values
loss_train <- loss_train[!is.na(loss_train$GrossChargeOffAmount),]
# Set up loss validation set
loss_valid <- filter(test_set, isDefault == 1)
loss_valid <- left_join(loss_valid, chg_vals, by="loanNum") # adding charge off values
loss_valid <- loss_valid[!is.na(loss_valid$GrossChargeOffAmount),]
# Training loss model
loss.mod <- lm(GrossChargeOffAmount~interestRate+unemploymentRate+hpiState+tedSpread+GrossApproval+TermInMonths+SBLR, data=loss_train)
summary(loss.mod)
# Testing loss model, computing MSE
loss.pred <- predict(loss.mod, newdata=loss_valid)
loss.pred <- loss.pred[!is.na(loss.pred)]
loss.mse <- mean((loss_valid$GrossChargeOffAmount-loss.pred)^2)
loss.mse
nrow(loss.pred)
length(loss.pred)
length(loss_valid$GrossChargeOffAmount)
?createTimeSlices
summary(loss.mod)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ROCR)
library(glmnet)
set.seed(2)
training_set = read.csv("training_set.csv")
sum(training_set$isDefault)
sum(training_set$isDefault)/length(unique(training_set$loanNum))
test_set = read.csv("validation_set.csv")
test_set = read.csv("validation_set.csv")
test500_set = read.csv("test500_full.csv")
sum(test_set$isDefault)
sum(test_set$isDefault)/length(unique(test_set$loanNum))
sum(test500_set$isDefault)/length(unique(test500_set$loanNum))
log_reg=glm(isDefault ~ GrossApproval+hpiState+sandp500+unemploymentRate+interestRate+sandp500,family=binomial,data=training_set)
summary(log_reg)
pred_log_reg=predict(log_reg,test_set,type="response")
pred_log_reg
log_reg_predict_values = c(rep(0,nrow(test_set)))
log_reg_predict_values[pred_log_reg>0.07] <-1
View(test_set)
loan_indices <- unique(test_set$loanNum)
loan_indices <- as.data.frame(unique(test_set$loanNum))
loan_indices$start <- 0
loan_indices$stop <- 0
View(loan_indices)
colnames(loan_indices) <- c("loan_no")
loan_indices <- as.data.frame(unique(test_set$loanNum))
loan_indices$start <- 1
loan_indices$stop <- 1
colnames(loan_indices) <- c("loan_no")
loan_indices <- as.data.frame(unique(test_set$loanNum))
loan_indices$start <- 1
loan_indices$stop <- 1
colnames(loan_indices) <- c("loan_no")
l = 1
for(i in 1:nrow(test_set)){
if(test_set$endIndicator[i]==1){
loan_indices$stop[l]=i
l=l+1
if(l<=nrow(loan_indices)){
loan_indices$start[l]=i
}
}
}
loan_indices <- as.data.frame(unique(test_set$loanNum))
loan_indices$start <- 1
loan_indices$stop <- 1
colnames(loan_indices) <- c("loan_no")
loan_indices <- as.data.frame(unique(test_set$loanNum))
loan_indices$start <- 1
loan_indices$stop <- 1
colnames(loan_indices) <- c("loan_no","start","stop")
l = 1
for(i in 1:nrow(test_set)){
if(test_set$endIndicator[i]==1){
loan_indices$stop[l]=i
l=l+1
if(l<=nrow(loan_indices)){
loan_indices$start[l]=i+1
}
}
}
View(loan_indices)
pred_test <- rep(0,length(pred_log_reg))
for(i in nrow(loan_indices))
{
a = loan_indices$start[i]
b = loan_indices$stop[i]
for(j in a:b){
if(j==a){
pred_test[a]=pred_log_reg[a]
}
else{
for(k in a:j){
counter = counter*(1-pred_log_reg[k])
}
pred_test[j]=1-counter
}
counter = 1
}
}
pred_test <- rep(0,length(pred_log_reg))
for(i in nrow(loan_indices))
{
a = loan_indices$start[i]
b = loan_indices$stop[i]
for(j in a:b){
if(j==a){
pred_test[a]=pred_log_reg[a]
}
else{
for(k in a:j){
counter = counter*(1-pred_log_reg[k])
}
pred_test[j]=1-counter
}
counter = 1
}
}
pred_test <- rep(0,length(pred_log_reg))
for(i in nrow(loan_indices))
{
a = loan_indices$start[i]
b = loan_indices$stop[i]
for(j in a:b){
if(j==a){
pred_test[a]=pred_log_reg[a]
}
else{
for(k in a:j){
counter = counter*(1-pred_log_reg[k])
}
pred_test[j]=1-counter
}
counter = 1
}
}
pred_test
pred_log_reg
pred_log_reg[1]
pred_log_reg[1]*pred_log_reg[2]
pred_test <- rep(0,length(pred_log_reg))
for(i in nrow(loan_indices))
{
a = loan_indices$start[i]
b = loan_indices$stop[i]
for(j in a:b){
print("a")
if(j==a){
pred_test[a]=pred_log_reg[a]
}
else{
for(k in a:j){
counter = counter*(1-pred_log_reg[k])
}
pred_test[j]=1-counter
}
counter = 1
}
}
for(i in 1:nrow(loan_indices))
{
a = loan_indices$start[i]
b = loan_indices$stop[i]
for(j in a:b){
print("a")
if(j==a){
pred_test[a]=pred_log_reg[a]
}
else{
for(k in a:j){
counter = counter*(1-pred_log_reg[k])
}
pred_test[j]=1-counter
}
counter = 1
}
}
pred_log_reg[1:21]
pred_test[1:21]
1-(1-0.0003171263)*(1-0.0012915487)
pred_test_val <- rep(0,length(pred_log_reg))
pred1 = prediction(pred_test, test_set$isDefault)
perf1 = performance(pred1, "tpr", "fpr")
plot(perf1)
pred1 = prediction(pred_test, test_set$isDefault)
perf1 = performance(pred1, "tpr", "fpr")
plot(perf1)
auc1 <- performance(pred1,measure = "auc")
auc1 <- auc1@y.values[[1]]
auc1
pred_test_val <- rep(0,length(pred_log_reg))
pred_test_val[pred_test>0.1] <-1
table(pred_test_val,test_set$isDefault)
pred_test_val <- rep(0,length(pred_log_reg))
pred_test_val[pred_test>0.09] <-1
table(pred_test_val,test_set$isDefault)
pred_test_val <- rep(0,length(pred_log_reg))
pred_test_val[pred_test>0.08] <-1
table(pred_test_val,test_set$isDefault)
library(ROCR)
pred1 = prediction(pred_test, test_set$isDefault)
perf1 = performance(pred1, "tpr", "fpr")
plot(perf1)
auc1 <- performance(pred1,measure = "auc")
auc1 <- performance(pred1,measure = "auc")
auc1 <- auc1@y.values[[1]]
auc1
