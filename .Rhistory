loss.var95.1 <- rep(0,500)
loss.avar95.1 <- rep(0,500)
loss.var99.1 <- rep(0,500)
loss.avar99.1 <- rep(0,500)
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss[curr.rows,]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99))
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.1[curr.rows,]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99))
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.1[curr.rows]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99))
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
?quantile
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.1[curr.rows]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
library(PerformanceAnalytics)
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.1[curr.rows]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
View(curr.loss.sum)
View(loss.matrix.1)
View(total.loss)
curr.vals
test500_set <- test500_set[!is.na(test500_set$interestRate),]
test500_set <- test500_set[!is.na(test500_set$unemploymentRate),]
test500_set <- test500_set[!is.na(test500_set$hpiState),]
test500_set <- test500_set[!is.na(test500_set$tedSpread),]
test500_set <- test500_set[!is.na(test500_set$sandp500),]
test500_set <- test500_set[!is.na(test500_set$TermInMonths),]
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.1[curr.rows]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
View(curr.var)
View(curr.loss.sum)
View(curr.rows)
View(curr.vals)
View(curr.prob.loss)
View(total.loss)
View(test.prob.loss.1)
test.prob.loss.1
View(test.loss)
summary(test.loss)
test500_set <- read.csv('test500_full.csv')
test500_set <- test500_set[test500_set$ApprovalFiscalYear==test500_set$start,]
test500_set <- test500_set[!is.na(test500_set$interestRate),]
test500_set <- test500_set[!is.na(test500_set$unemploymentRate),]
test500_set <- test500_set[!is.na(test500_set$hpiState),]
test500_set <- test500_set[!is.na(test500_set$tedSpread),]
test500_set <- test500_set[!is.na(test500_set$sandp500),]
test500_set <- test500_set[!is.na(test500_set$TermInMonths),]
def.probs <- read.csv("prob.csv")
names(def.probs)[2] <- "loanNum"
def.probs <- select(def.probs, loanNum, Prob1yr, Prob5yr)
def.unif.1 <- runif(500,0,1)
def.unif.5 <- runif(500,0,1)
test.def.1 <- ifelse(def.unif.1<def.probs$Prob1yr, 1, 0)
test.def.5 <- ifelse(def.unif.5<def.probs$Prob5yr, 1, 0)
test500_set <- left_join(test500_set, def.probs, by="loanNum")
test500_set$loghpi <- log(test500_set$hpiState)
test.loss <- predict(rf.tree, newdata=test500_set)
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
test.prob.loss.5 <- test.loss * test500_set$GrossApproval * test.def.5
loss.matrix.1 <- matrix(nrow=500, ncol=500)
loss.var95.1 <- rep(0,500)
loss.avar95.1 <- rep(0,500)
loss.var99.1 <- rep(0,500)
loss.avar99.1 <- rep(0,500)
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.1[curr.rows]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
pl.var95.1 <- hist(loss.var95.1, main = "VaR Frequency: 1-Year Loss", xlab = "VaR (95% level)")
library(graphics)
pl.var95.1 <- hist(loss.var95.1, main = "VaR Frequency: 1-Year Loss", xlab = "VaR (95% level)")
abline(v=quantile(loss.var95.1,probs=seq(0.95)),col="red")
pl.var95.1 <- hist(loss.var95.1, main = "VaR Frequency: 1-Year Loss", xlab = "VaR (95% level)")
library(ggplot2)
loss.matrix.5 <- matrix(nrow=500, ncol=500)
loss.var95.5 <- rep(0,500)
loss.avar95.5 <- rep(0,500)
loss.var99.5 <- rep(0,500)
loss.avar99.5 <- rep(0,500)
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
curr.rows <- sample(c(1:500), replace=TRUE)
curr.vals <- test500_set[curr.rows,]
# Getting losses
curr.prob.loss <- test.prob.loss.5[curr.rows]
# Calculating total loss, store it in matrix
total.loss <- sum(curr.prob.loss)
loss.matrix.5[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.5[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99),na.rm=TRUE)
loss.var95.5[i] <- curr.var[1]
loss.var99.5[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.5[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.5[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
View(curr.loss.sum)
curr.loss.sum[length(curr.loss.sum)]
?plot
pl.var95.1 <- hist(loss.var95.1, main = "VaR Frequency: 1-Year Loss", xlab = "VaR (95% level)")
?qplot
pl.var95.5 <- qplot(y=loss.var95.5)
pl.var95.5
pl.var95.5 <- ggplot() + geom_density(mapping=aes(x=loss.var95.5))
pl.var95.5
pl.var95.1 <- ggplot() + geom_density(mapping=aes(x=loss.var95.1))
pl.var95.1
pl.var95.5
av.Var.99.1 <- mean(loss.var99.1)
hist(total.loss)
pl.ls <- ggplot() + geom_density(mapping=aes(x=first_loss))
pl.ls
first_loss <- loss.matrix.1[1,]
pl.ls <- ggplot() + geom_density(mapping=aes(x=first_loss))
pl.ls
loss.matrix.1 <- matrix(nrow=500, ncol=500)
loss.var95.1 <- rep(0,500)
loss.avar95.1 <- rep(0,500)
loss.var99.1 <- rep(0,500)
loss.avar99.1 <- rep(0,500)
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
test.def.1 <- ifelse(def.unif.1<def.probs$Prob1yr, 1, 0)
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
typeof(def.unif.1)
def.unif.1
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
test.def.1 <- ifelse(def.probs$Prob1yr<def.unif.1, 1, 0)
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
for(k in 1:nrow(def.probs)){
test.def.1[k] <- ifelse(def.probs$Prob1yr[k]<def.unif.1, 1, 0)
}
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
for(k in 1:nrow(def.probs)){
if (def.probs$Prob1yr[k]<def.unif.1){
test.def.1[k] <- 1
} else{
test.def.1[k] <- 0
}
}
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
def.probs$Prob1yr[1]
def.probs$Prob1yr[k]<def.unif.1
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
for(k in 1:nrow(def.probs)){
if (def.probs$Prob1yr[k]<def.unif.1){
test.def.1[k] <- 1
} else{
test.def.1[k] <- 0
}
}
print("Test")
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
nrow(test500_set)
loss.matrix.1 <- matrix(nrow=500, ncol=494)
loss.var95.1 <- rep(0,494)
loss.avar95.1 <- rep(0,494)
loss.var99.1 <- rep(0,494)
loss.avar99.1 <- rep(0,494)
for (i in 1:500) {
for (j in 1:500) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
for(k in 1:nrow(def.probs)){
if (def.probs$Prob1yr[k] < def.unif.1){
test.def.1[k] <- 1
} else{
test.def.1[k] <- 0
}
}
print("Test")
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
for (i in 1:500) {
for (j in 1:494) {
# Creating bootstrapped sample
# Monte Carlo values
def.unif.1 <- runif(1,0,1)
# Matrix of default events
for(k in 1:nrow(def.probs)){
if (def.probs$Prob1yr[k] < def.unif.1){
test.def.1[k] <- 1
} else{
test.def.1[k] <- 0
}
}
print("Test")
# Losses
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
# Calculating total loss, store it in matrix
total.loss <- sum(test.prob.loss.1)
loss.matrix.1[i,j] <- total.loss
}
# Calculate VaR for both confidence levels
curr.loss.sum <- loss.matrix.1[i,]
curr.var <- quantile(curr.loss.sum, probs = seq(0.95, 0.99), na.rm=TRUE)
loss.var95.1[i] <- curr.var[1]
loss.var99.1[i] <- curr.var[2]
# Calculate AVaR for both confidence levels
loss.avar95.1[i] <- ES(curr.loss.sum, p=0.95, method="historical", clean="none", portfolio_method="single")
loss.avar99.1[i] <- ES(curr.loss.sum, p=0.99, method="historical", clean="none", portfolio_method="single")
}
lossTot <- rep(0,1000)
for(i in 1:10000){
check <- runif(1,0,1)
for(i in 1:nrow(def.probs)){
if(def.probs$Prob1yr[i]>=check){
test.def.1 <- 1
}
else{
test.def.1 <- 0
}
}
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
lossTot[i] <- sum(test.prob.loss.1)
}
lossTot <- rep(0,1000)
for(i in 1:1000){
check <- runif(1,0,1)
for(i in 1:nrow(def.probs)){
if(def.probs$Prob1yr[i]>=check){
test.def.1 <- 1
}
else{
test.def.1 <- 0
}
}
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * test.def.1
lossTot[i] <- sum(test.prob.loss.1)
}
hist(lossTot)
for(i in 1:1000){
check <- runif(1,0,1)
for(j in 1:nrow(def.probs)){
if(def.probs$Prob1yr[j]>=check){
probDef[j] <- 1
}
else{
probDef[j] <- 0
}
}
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * probDef
lossTot[i] <- sum(test.prob.loss.1)
}
probDef <- rep(0,494)
for(i in 1:1000){
check <- runif(1,0,1)
for(j in 1:nrow(def.probs)){
if(def.probs$Prob1yr[j]>=check){
probDef[j] <- 1
}
else{
probDef[j] <- 0
}
}
test.prob.loss.1 <- test.loss * test500_set$GrossApproval * probDef
lossTot[i] <- sum(test.prob.loss.1)
}
for(i in 1:1000){
check <- runif(1,0,1)
for(j in 1:nrow(def.probs)){
if(def.probs$Prob1yr[j]>=check){
probDef[j] <- 1
}
else{
probDef[j] <- 0
}
}
#test.prob.loss.1 <- test.loss * test500_set$GrossApproval * probDef
lossTot[i] <- sum(test.prob.loss.1)
}
nrow(test500_set)
nrow(test.loss)
test.loss <- predict(rf.tree, newdata=test500_set)
nrow(test.loss)
